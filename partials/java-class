{% from "partials/all-args-constructor" import allArgsConstructor -%}
{%- macro javaClass(schemaName, schema, properties, indentLevel, isStatic) %}
{%- set modelClass = {schema: schema, schemaName: schemaName} | getModelClass %}
{%- set schemaForRef = schemaName | getAnonymousSchemaForRef %}
{% if schemaForRef %}
{% set schema = schemaForRef %}
{% set properties = schemaForRef.properties() %}
{% endif %}
{%- if modelClass %}
{%- set className = modelClass.getClassName() %}
{{ 'javaClass' | logJavaClass -}}
{{ className | logJavaClass -}}
{% set indent1 = indentLevel | indent1 -%}
{% set indent2 = indentLevel | indent2 -%}
{% set indent3 = indentLevel | indent3 -%}
{{ indent1 }}public {% if isStatic %}static {% endif %}class {{ className }}
{%- if modelClass.isSubClass() %} extends {{ modelClass.getSuperClassName() }}{% endif %} {

{# If the top level object is an array, we need to deal with that specially. -#}
{%- if schema and schema.type() === 'array' -%}
{{ allArgsConstructor(className, schema.items().properties(), indentLevel) }}
{{ javaClass(type, null, schema.items().properties(), indentLevel+1, true) }}
{%- else -%} {# not an array at the top level. #}
{{ allArgsConstructor(className, properties, indentLevel) }}
{% endif -%}
{# Members #}
{%- for name, prop in properties %}
{%- set propModelClass = {schema: prop, schemaName: name} | getModelClass %}
{%- set realClassName = propModelClass.getClassName() %}
{%- set variableName = realClassName | identifierName -%}
{%- set typeInfo = [realClassName, realClassName, prop] | fixType -%}
{%- set type = typeInfo[0] %}
{{ indent2 }}@JsonProperty("{{name}}")
{{ indent2 }}private {{ type }} {{ variableName }};
{%- endfor %}

{#- Getters and Setters #}
{%- for name, prop in properties %}
{%- set propModelClass = {schema: prop, schemaName: name} | getModelClass %}
{%- set realClassName = propModelClass.getClassName() %}
{%- set variableName = realClassName | identifierName -%}
{%- set typeInfo = [name, realClassName, prop] | fixType -%}
{% set type = typeInfo[0] -%}
{% set isArrayOfObjects = typeInfo[1] %}

{# Inner classes #}
{%- set innerModelClass = {schema: prop, schemaName: variableName} | getModelClass %}
{%- if prop.type() === 'object' and innerModelClass and innerModelClass.canBeInnerClass() %}
{{ javaClass(variableName, prop, prop.properties(), indentLevel+1, true) }}
{%- endif %}
{%- if isArrayOfObjects and innerModelClass and innerModelClass.canBeInnerClass() %}
{{ javaClass(variableName, prop, prop.items().properties(), indentLevel+1, true) }}
{%- endif %}
{# Enums #}
{%- if prop.enum() %}
{{ indent2 }}public static enum {{ type }} { {{ prop.enum() }} }
{%- endif %}
{%- endfor -%}

{%- if modelClass.isSubClass() %}
{{ indent3 }}+ " super: " + super.toString(){% endif %}
{{ indent1 }}}{% endif -%}
{%- endmacro -%}
